## 详解 CSS 七种三栏布局技巧
> 林东洲

三栏布局，顾名思义就是两边固定，中间自适应。三栏布局在开发十分常见，那么什么是三栏布局？比如我打开某东的首页：

[v2-a0098f2bc21152879d2cfe3888a040f8_b][v2-a0098f2bc21152879d2cfe3888a040f8_720w]映入眼帘的就是一个常见的三栏布局：即左边商
品导航和右边导航固定宽度，中间的主要内容随浏览器宽度自适应。

下面围绕的这样的目的，即左右模块固定宽度，中间模块随浏览器变化自适应，想要完成的最终效果如下图所示：

[v2-4535c7dd53d222b7948bfd439c790bfe_b][v2-4535c7dd53d222b7948bfd439c790bfe_720w]红色和蓝色宽度固定，绿色宽度自适应，下面七
种方法实现的最终效果跟这个差不多，可能会稍有不同。

下面七种技巧各有千秋，在开发中可以根据实际需求选择适合自己的方法进行编码。

1. 流体布局

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .left {
            float: left;
            height: 200px;
            width: 100px;
            background-color: red;
        }
        .right {
            width: 200px;
            height: 200px;
            background-color: blue;
            float: right;
        }
        .main {
            margin-left: 120px;
            margin-right: 220px;
            height: 200px;
            background-color: green;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="left"></div>
        <div class="right"></div>
        <div class="main"></div>
    </div>
</body>
</html>

左右模块各自向左右浮动，并设置中间模块的 margin 值使中间模块宽度自适应。

缺点就是主要内容无法最先加载，当页面内容较多时会影响用户体验。

2. BFC 三栏布局

BFC 规则有这样的描述：BFC 区域，不会与浮动元素重叠。因此我们可以利用这一点来实现 3 列布局。

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .left {
            float: left;
            height: 200px;
            width: 100px;
            margin-right: 20px;
            background-color: red;
        }
        .right {
            width: 200px;
            height: 200px;
            float: right;
            margin-left: 20px;
            background-color: blue;
        }
        .main {
            height: 200px;
            overflow: hidden;
            background-color: green;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="left"></div>
        <div class="right"></div>
        <div class="main"></div>
    </div>
</body>
</html>

缺点跟方法一类似，主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了下面要介绍的布局方
案双飞翼布局。


3. 双飞翼布局

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .content {
            float: left;
            width: 100%;
        }
        .main {
            height: 200px;
            margin-left: 110px;
            margin-right: 220px;
            background-color: green;
        }
        .left {
            float: left;
            height: 200px;
            width: 100px;
            margin-left: -100%;
            background-color: red;
        }
        .right {
            width: 200px;
            height: 200px;
            float: right;
            margin-left: -200px;
            background-color: blue;
        }
    </style>
</head>
<body>
    <div class="content">
        <div class="main"></div>
    </div>
    <div class="left"></div>
    <div class="right"></div>
</body>
</html>

利用的是浮动元素 margin 负值的应用，感兴趣的同学可以上网搜搜原理。

主体内容可以优先加载，HTML 代码结构稍微复杂点。

4. 圣杯布局

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .container {
            margin-left: 120px;
            margin-right: 220px;
        }
        .main {
            float: left;
            width: 100%;
            height: 300px;
            background-color: red;
        }
        .left {
            float: left;
            width: 100px;
            height: 300px;
            margin-left: -100%;
            position: relative;
            left: -120px;
            background-color: blue;
        }
        .right {
            float: left;
            width: 200px;
            height: 300px;
            margin-left: -200px;
            position: relative;
            right: -220px;
            background-color: green;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main"></div>
        <div class="left"></div>
        <div class="right"></div>
    </div>
</body>
</html>

跟双飞翼布局很像，有一些细节上的区别，相对于双飞翼布局来说，HTML 结构相对简单，但是样式定义就稍微复杂，也是优先加载内容主体
。

5. Flex 布局

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .container {
            display: flex;
        }
        .main {
            flex-grow: 1;
            height: 300px;
            background-color: red;
        }
        .left {
            order: -1;
            flex: 0 1 200px;
            margin-right: 20px;
            height: 300px;
            background-color: blue;
        }
        .right {
            flex: 0 1 100px;
            margin-left: 20px;
            height: 300px;
            background-color: green;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main"></div>
        <div class="left"></div>
        <div class="right"></div>
    </div>
</body>
</html>

简单实用，未来的趋势，需要考虑浏览器的兼容性。

6. Table 布局

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .container {
            display: table;
            width: 100%;
        }
        .left, .main, .right {
            display: table-cell;
        }
        .left {
            width: 200px;
            height: 300px;
            background-color: red;
        }
        .main {
            background-color: blue;
        }
        .right {
            width: 100px;
            height: 300px;
            background-color: green;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="left"></div>
        <div class="main"></div>
        <div class="right"></div>
    </div>
</body>
</html>

缺点：无法设置栏间距

7. 绝对定位布局

<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .container {
            position: relative;
        }
        .main {
            height: 400px;
            margin: 0 120px;
            background-color: green;
        }
        .left {
            position: absolute;
            width: 100px;
            height: 300px;
            left: 0;
            top: 0;
            background-color: red;
        }
        .right {
            position: absolute;
            width: 100px;
            height: 300px;
            background-color: blue;
            right: 0;
            top: 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main"></div>
        <div class="left"></div>
        <div class="right"></div>
    </div>
</body>
</html>

简单实用，并且主要内容可以优先加载。

编辑于 2017-02-05
 
CSS
 
前端开发
​赞同 310​​36 条评论
​分享
​喜欢​收藏
​
赞同 310
​
分享

文章被以下专栏收录

     
    前端客栈

     
    前端客栈

    专注于前端，Node，计算机知识
    进入专栏

推荐阅读

     
    一行css代码搞定响应式布局

    一行css代码搞定响应式布局

    icepy
     
    详解 CSS 居中布局技巧

    详解 CSS 居中布局技巧

    林东洲发表于前端客栈
     
    CSS三栏布局的四种方法

    CSS三栏布局的四种方法

    Damon...发表于前端进击者
     

    css的9个常用选择器

    1. 类选择器（通过类名进行选择） &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&
    gt; &lt;style type=&#34;text/css&#34;&gt; .p1{ color: #00ff…

    切图仔

36 条评论

​切换为时间排序
写下你的评论...

[                    ]
发布

  • 幸福的鱼先生丶
    幸福的鱼先生丶2017-02-04
    都是固定宽度吧！！！！！！！
    ​2​回复​踩​举报
  • 南山老幺
    南山老幺回复幸福的鱼先生丶2017-08-18

    第一个不是吧

    ​赞​回复​踩​举报

  • 秀发耷拉到腚
    秀发耷拉到腚2017-02-04
    很全面，非常好，感谢分享
    ​1​回复​踩​举报
  • 林东洲
    林东洲 (作者) 回复秀发耷拉到腚2017-02-04
    不客气
    ​赞​回复​踩​举报

  • 田冬冬
    田冬冬2017-02-04
    记得有HTML5的语法专门做布局用的简单语法但适用范围可能不全。作为菜鸟，建议别考虑低版本IE了。
    ​赞​回复​踩​举报
  • wpbest
    wpbest回复田冬冬2019-03-11
    你说的是grid吧
    ​赞​回复​踩​举报

  • 知乎用户知乎用户2017-02-04
    谢谢分享。
    很全面的哦
    ​赞​回复​踩​举报
  • 林东洲
    林东洲 (作者) 回复知乎用户2017-02-04
    哈哈哈那不是应该点个赞吗
    ​赞​回复​踩​举报

  • 海怪
    海怪2017-02-05
    666，都知乎专栏了
    ​赞​回复​踩​举报
  • 林东洲
    林东洲 (作者) 回复海怪2017-02-05
    这尼玛都能让你找到
    可以啊
    ​赞​回复​踩​举报

  • 斑马世刺
    斑马世刺2017-02-05
    这么老的玩意儿怎么还有人写
    ​赞​回复​踩​举报

  • 知乎用户知乎用户2017-02-05
    对双飞翼布局的CSS有疑问：你是在main样式上清除浮动的，可是你浮动的是content样式。给main样式清除浮动有什么作用？如果说想
    清除 content样式的浮动，那按理来说content样式即使是浮动的，他也能计算出内部元素的高度，那又有什么作用呢？这个清除浮动无
    论在哪一点看来都没有意义吧？
    ​赞​回复​踩​举报
  • 林东洲
    林东洲 (作者) 回复知乎用户2017-02-05
    抱歉感谢指出，这里确实没有用，清除浮动样式就根据后面的新元素添加上即可。这是好久以前整理的笔记了，确实有疏忽。
    ​赞​回复​踩​举报

  • 奔跑的蜗牛
    奔跑的蜗牛2017-02-06
    可以，
    ​赞​回复​踩​举报

  • 八斤六两
    八斤六两2017-02-08
    双飞翼的.right是margin-left：-200px？觉得是right吧？
    ​赞​回复​踩​举报
  • 林东洲
    林东洲 (作者) 回复八斤六两2017-02-08
    不是的
    ​赞​回复​踩​举报
  • 恍恍惚惚是白菜啊
    恍恍惚惚是白菜啊回复林东洲 (作者) 2017-04-22

    关于双飞燕这个，试验了一下发现，.right{ float:left, margin-left: (自身宽度） } 也可以的- -类似圣杯布局的做法

    ​赞​回复​踩​举报

  • 陈老六
    陈老六2017-02-08
    很有用，谢谢，另外求你的webstorm主题设置^_^
    ​赞​回复​踩​举报
  • 林东洲
    林东洲 (作者) 回复陈老六2017-02-08
    webstorm 我直接用系统默认的黑色皮肤
    ​赞​回复​踩​举报

  • 知乎用户知乎用户2017-02-11
    感觉挺有用的
    ​赞​回复​踩​举报

  • 赵dm
    赵dm2017-03-13
    MARK
    ​赞​回复​踩​举报

  • TheJadeEmperor
    TheJadeEmperor2017-04-27
    用border-box也是可以,left和right都绝对已定位{left:0;}和{right:0;},中间的content设置一下border-left和border-right，宽度
    始终设为100%就可以了
    ​赞​回复​踩​举报

  • guorui
    guorui2017-07-27

    table 布局可以改成

    <!DOCTYPE html>

    <html lang="en">

    <head>

    <style>

    .container {

    display: table;

    width: 100%;

    }

    .left, .box, .right {

    display: table-cell;

    }

    .left {

    width: 200px;

    height: 300px;

    background-color: red;

    }

    .main {

    margin:0px 20px;

    height: 300px;

    background-color: blue;

    }

    .right {

    width: 100px;

    height: 300px;

    background-color: green;

    }

    </style>

    </head>

    <body>

    <div class="container">

    <div class="left"></div>

    <div class="box">

    <div class="main"></div>

    </div>

    <div class="right"></div>

    </div>

    </body>

    </html>


    优先加载是指什么？

    现在还有cacl的方法

    这个还可以用css 3新的grid网格布局

    Table布局中可以使用border-spacing设置间距
